{"version":3,"file":"Explorer.js","sources":["../../src/Explorer.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { displayValue, styled } from './utils'\nimport superjson from 'superjson'\n\nexport const Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word',\n})\n\nexport const Label = styled('span', {\n  color: 'white',\n})\n\nexport const LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white',\n})\n\nexport const ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0,\n})\n\ntype CopyState = 'NoCopy' | 'SuccessCopy' | 'ErrorCopy'\n\nexport const CopyButton = ({ value }: { value: unknown }) => {\n  const [copyState, setCopyState] = React.useState<CopyState>('NoCopy')\n\n  return (\n    <button\n      onClick={\n        copyState === 'NoCopy'\n          ? () => {\n              navigator.clipboard.writeText(superjson.stringify(value)).then(\n                () => {\n                  setCopyState('SuccessCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n                (err) => {\n                  console.error('Failed to copy: ', err)\n                  setCopyState('ErrorCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n              )\n            }\n          : undefined\n      }\n      style={{\n        cursor: 'pointer',\n        color: 'inherit',\n        font: 'inherit',\n        outline: 'inherit',\n        background: 'transparent',\n        border: 'none',\n        padding: 0,\n      }}\n    >\n      {copyState === 'NoCopy' ? (\n        <Copier />\n      ) : copyState === 'SuccessCopy' ? (\n        <CopiedCopier />\n      ) : (\n        <ErrorCopier />\n      )}\n    </button>\n  )\n}\n\nexport const Value = styled('span', (_props, theme) => ({\n  color: theme.danger,\n}))\n\nexport const SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)',\n})\n\nexport const Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em',\n})\n\ntype ExpanderProps = {\n  expanded: boolean\n  style?: React.CSSProperties\n}\n\nexport const Expander = ({ expanded, style = {} }: ExpanderProps) => (\n  <span\n    style={{\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: `rotate(${expanded ? 90 : 0}deg) ${style.transform || ''}`,\n      ...style,\n    }}\n  >\n    â–¶\n  </span>\n)\n\nconst Copier = () => (\n  <span\n    aria-label=\"Copy object to clipboard\"\n    title=\"Copy object to clipboard\"\n    style={{\n      paddingLeft: '1em',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\">\n      <path\n        fill=\"currentColor\"\n        d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n      ></path>\n      <path\n        fill=\"currentColor\"\n        d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n      ></path>\n    </svg>\n  </span>\n)\n\nconst ErrorCopier = () => (\n  <span\n    aria-label=\"Failed copying to clipboard\"\n    title=\"Failed copying to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'flex',\n      alignItems: 'center',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\" display=\"block\">\n      <path\n        fill=\"red\"\n        d=\"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n      ></path>\n    </svg>\n    <span\n      style={{\n        color: 'red',\n        fontSize: '12px',\n        paddingLeft: '4px',\n        position: 'relative',\n        top: '2px',\n      }}\n    >\n      See console\n    </span>\n  </span>\n)\n\nconst CopiedCopier = () => (\n  <span\n    aria-label=\"Object copied to clipboard\"\n    title=\"Object copied to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    }}\n  >\n    <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" display=\"block\">\n      <path\n        fill=\"green\"\n        d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n      ></path>\n    </svg>\n  </span>\n)\n\ntype Entry = {\n  label: string\n}\n\ntype RendererProps = {\n  handleEntry: (entry: Entry) => JSX.Element\n  label?: string\n  value: unknown\n  subEntries: Entry[]\n  subEntryPages: Entry[][]\n  type: string\n  expanded: boolean\n  copyable: boolean\n  toggleExpanded: () => void\n  pageSize: number\n}\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (size < 1) return []\n  let i = 0\n  const result: T[][] = []\n  while (i < array.length) {\n    result.push(array.slice(i, i + size))\n    i = i + size\n  }\n  return result\n}\n\ntype Renderer = (props: RendererProps) => JSX.Element\n\nexport const DefaultRenderer: Renderer = ({\n  handleEntry,\n  label,\n  value,\n  subEntries = [],\n  subEntryPages = [],\n  type,\n  expanded = false,\n  copyable = false,\n  toggleExpanded,\n  pageSize,\n}) => {\n  const [expandedPages, setExpandedPages] = React.useState<number[]>([])\n\n  return (\n    <Entry key={label}>\n      {subEntryPages.length ? (\n        <>\n          <ExpandButton onClick={() => toggleExpanded()}>\n            <Expander expanded={expanded} /> {label}{' '}\n            <Info>\n              {String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : ''}\n              {subEntries.length} {subEntries.length > 1 ? `items` : `item`}\n            </Info>\n          </ExpandButton>\n          {copyable ? <CopyButton value={value} /> : null}\n          {expanded ? (\n            subEntryPages.length === 1 ? (\n              <SubEntries>{subEntries.map(handleEntry)}</SubEntries>\n            ) : (\n              <SubEntries>\n                {subEntryPages.map((entries, index) => (\n                  <div key={index}>\n                    <Entry>\n                      <LabelButton\n                        onClick={() =>\n                          setExpandedPages((old) =>\n                            old.includes(index)\n                              ? old.filter((d) => d !== index)\n                              : [...old, index],\n                          )\n                        }\n                      >\n                        <Expander expanded={expanded} /> [{index * pageSize} ...{' '}\n                        {index * pageSize + pageSize - 1}]\n                      </LabelButton>\n                      {expandedPages.includes(index) ? (\n                        <SubEntries>{entries.map(handleEntry)}</SubEntries>\n                      ) : null}\n                    </Entry>\n                  </div>\n                ))}\n              </SubEntries>\n            )\n          ) : null}\n        </>\n      ) : (\n        <>\n          <Label>{label}:</Label> <Value>{displayValue(value)}</Value>\n        </>\n      )}\n    </Entry>\n  )\n}\n\ntype ExplorerProps = Partial<RendererProps> & {\n  renderer?: Renderer\n  defaultExpanded?: true | Record<string, boolean>\n  copyable?: boolean\n}\n\ntype Property = {\n  defaultExpanded?: boolean | Record<string, boolean>\n  label: string\n  value: unknown\n}\n\nfunction isIterable(x: any): x is Iterable<unknown> {\n  return Symbol.iterator in x\n}\n\nexport default function Explorer({\n  value,\n  defaultExpanded,\n  renderer = DefaultRenderer,\n  pageSize = 100,\n  copyable = false,\n  ...rest\n}: ExplorerProps) {\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded))\n  const toggleExpanded = React.useCallback(() => setExpanded((old) => !old), [])\n\n  let type: string = typeof value\n  let subEntries: Property[] = []\n\n  const makeProperty = (sub: { label: string; value: unknown }): Property => {\n    const subDefaultExpanded =\n      defaultExpanded === true\n        ? { [sub.label]: true }\n        : defaultExpanded?.[sub.label]\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded,\n    }\n  }\n\n  if (Array.isArray(value)) {\n    type = 'array'\n    subEntries = value.map((d, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: d,\n      }),\n    )\n  } else if (\n    value !== null &&\n    typeof value === 'object' &&\n    isIterable(value) &&\n    typeof value[Symbol.iterator] === 'function'\n  ) {\n    type = 'Iterable'\n    subEntries = Array.from(value, (val, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: val,\n      }),\n    )\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object'\n    subEntries = Object.entries(value).map(([key, val]) =>\n      makeProperty({\n        label: key,\n        value: val,\n      }),\n    )\n  }\n\n  const subEntryPages = chunkArray(subEntries, pageSize)\n\n  return renderer({\n    handleEntry: (entry) => (\n      <Explorer\n        key={entry.label}\n        value={value}\n        renderer={renderer}\n        copyable={copyable}\n        {...rest}\n        {...entry}\n      />\n    ),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest,\n  })\n}\n"],"names":["Entry","styled","fontFamily","fontSize","lineHeight","outline","wordBreak","Label","color","LabelButton","cursor","ExpandButton","font","background","border","padding","CopyButton","value","copyState","setCopyState","React","useState","navigator","clipboard","writeText","superjson","stringify","then","setTimeout","err","console","error","undefined","Value","_props","theme","danger","SubEntries","marginLeft","paddingLeft","borderLeft","Info","Expander","expanded","style","display","transition","transform","Copier","ErrorCopier","alignItems","position","top","CopiedCopier","verticalAlign","chunkArray","array","size","i","result","length","push","slice","DefaultRenderer","handleEntry","label","subEntries","subEntryPages","type","copyable","toggleExpanded","pageSize","expandedPages","setExpandedPages","String","toLowerCase","map","entries","index","old","includes","filter","d","displayValue","isIterable","x","Symbol","iterator","Explorer","defaultExpanded","renderer","rest","setExpanded","Boolean","useCallback","makeProperty","sub","subDefaultExpanded","Array","isArray","toString","from","val","Object","key","entry","_extends"],"mappings":"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"}