{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user)\n  });\n  return data.appointments;\n}\nexport function useUserAppointments() {\n  _s();\n  const {\n    user\n  } = useUser();\n  const queryClient = useQueryClient();\n  const fallback = [];\n  const {\n    data: userAppointments = fallback\n  } = useQuery([queryKeys.appointments, queryKeys.user, user === null || user === void 0 ? void 0 : user.id], () => getUserAppointments(user), {\n    enabled: !!user\n  });\n  return userAppointments;\n}\n_s(useUserAppointments, \"x3E20BkKrzcDLo0BO3H/aXAT6rI=\", false, function () {\n  return [useUser, useQueryClient, useQuery];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","useUser","getUserAppointments","user","data","get","id","headers","appointments","useUserAppointments","queryClient","fallback","userAppointments","enabled"],"sources":["C:/Users/tjdgh/Desktop/study/react-query/react-query-example/base-lazy-days/client/src/components/user/hooks/useUserAppointments.ts"],"sourcesContent":["import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport dayjs from 'dayjs';\n\nimport type { Appointment, User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(\n  user: User | null,\n): Promise<Appointment[] | null> {\n  if (!user) return null;\n  const { data } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user),\n  });\n  return data.appointments;\n}\n\nexport function useUserAppointments(): Appointment[] {\n  const { user } = useUser();\n\n  const queryClient = useQueryClient();\n  const fallback: Appointment[] = [];\n\n  const { data: userAppointments = fallback } = useQuery(\n    [queryKeys.appointments, queryKeys.user, user?.id],\n    () => getUserAppointments(user),\n    {\n      enabled: !!user,\n    },\n  );\n\n  return userAppointments;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,uBAAuB;AAIhE,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,OAAO,QAAQ,WAAW;;AAEnC;AACA,eAAeC,mBAAmB,CAChCC,IAAiB,EACc;EAC/B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,aAAa,CAACO,GAAG,CAAE,SAAQF,IAAI,CAACG,EAAG,eAAc,EAAE;IACxEC,OAAO,EAAER,YAAY,CAACI,IAAI;EAC5B,CAAC,CAAC;EACF,OAAOC,IAAI,CAACI,YAAY;AAC1B;AAEA,OAAO,SAASC,mBAAmB,GAAkB;EAAA;EACnD,MAAM;IAAEN;EAAK,CAAC,GAAGF,OAAO,EAAE;EAE1B,MAAMS,WAAW,GAAGb,cAAc,EAAE;EACpC,MAAMc,QAAuB,GAAG,EAAE;EAElC,MAAM;IAAEP,IAAI,EAAEQ,gBAAgB,GAAGD;EAAS,CAAC,GAAGf,QAAQ,CACpD,CAACI,SAAS,CAACQ,YAAY,EAAER,SAAS,CAACG,IAAI,EAAEA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,EAAE,CAAC,EAClD,MAAMJ,mBAAmB,CAACC,IAAI,CAAC,EAC/B;IACEU,OAAO,EAAE,CAAC,CAACV;EACb,CAAC,CACF;EAED,OAAOS,gBAAgB;AACzB;AAAC,GAfeH,mBAAmB;EAAA,QAChBR,OAAO,EAEJJ,cAAc,EAGYD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}