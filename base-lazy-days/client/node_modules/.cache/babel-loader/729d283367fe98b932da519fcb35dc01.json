{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMutation } from '@tanstack/react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\n// for when we need functions for useMutation\nasync function setAppointmentUser(appointment, userId) {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{\n    op: patchOp,\n    path: '/userId',\n    value: userId\n  }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData\n  });\n}\n\n// TODO: update type for React Query mutate function\n\nexport function useReserveAppointment() {\n  _s();\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast();\n  const {\n    mutate\n  } = useMutation(appointment => setAppointmentUser(appointment, user === null || user === void 0 ? void 0 : user.id));\n}\n_s(useReserveAppointment, \"E5biGK6hKVeRXoP/BI43Cb6s1PM=\", false, function () {\n  return [useUser, useCustomToast, useMutation];\n});","map":{"version":3,"names":["useMutation","axiosInstance","useCustomToast","useUser","setAppointmentUser","appointment","userId","patchOp","patchData","op","path","value","patch","id","data","useReserveAppointment","user","toast","mutate"],"sources":["C:/Users/tjdgh/Desktop/study/react-query/react-query-example/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"sourcesContent":["import { useMutation } from '@tanstack/react-query';\n\nimport { Appointment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\n// for when we need functions for useMutation\nasync function setAppointmentUser(\n  appointment: Appointment,\n  userId: number | undefined,\n): Promise<void> {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData,\n  });\n}\n\n// TODO: update type for React Query mutate function\ntype AppointmentMutationFunction = (appointment: Appointment) => void;\n\nexport function useReserveAppointment(): AppointmentMutationFunction {\n  const { user } = useUser();\n  const toast = useCustomToast();\n\n  const { mutate } = useMutation((appointment) =>\n    setAppointmentUser(appointment, user?.id),\n  );\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,OAAO,QAAQ,0BAA0B;;AAElD;AACA,eAAeC,kBAAkB,CAC/BC,WAAwB,EACxBC,MAA0B,EACX;EACf,IAAI,CAACA,MAAM,EAAE;EACb,MAAMC,OAAO,GAAGF,WAAW,CAACC,MAAM,GAAG,SAAS,GAAG,KAAK;EACtD,MAAME,SAAS,GAAG,CAAC;IAAEC,EAAE,EAAEF,OAAO;IAAEG,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAEL;EAAO,CAAC,CAAC;EACnE,MAAML,aAAa,CAACW,KAAK,CAAE,gBAAeP,WAAW,CAACQ,EAAG,EAAC,EAAE;IAC1DC,IAAI,EAAEN;EACR,CAAC,CAAC;AACJ;;AAEA;;AAGA,OAAO,SAASO,qBAAqB,GAAgC;EAAA;EACnE,MAAM;IAAEC;EAAK,CAAC,GAAGb,OAAO,EAAE;EAC1B,MAAMc,KAAK,GAAGf,cAAc,EAAE;EAE9B,MAAM;IAAEgB;EAAO,CAAC,GAAGlB,WAAW,CAAEK,WAAW,IACzCD,kBAAkB,CAACC,WAAW,EAAEW,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,EAAE,CAAC,CAC1C;AACH;AAAC,GAPeE,qBAAqB;EAAA,QAClBZ,OAAO,EACVD,cAAc,EAETF,WAAW;AAAA"},"metadata":{},"sourceType":"module"}