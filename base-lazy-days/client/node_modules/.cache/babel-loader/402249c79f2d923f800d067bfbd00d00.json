{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\nexport function useUser() {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery(queryKeys.user, () => getUser(user));\n\n  // meant to be called from useAuth\n  function updateUser(newUser) {\n    queryClient.setQueriesData(queryKeys.user, newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"NmeRR1fLBB2wYNsHdaD9UXHQupU=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","getUser","user","data","get","id","headers","useUser","queryClient","updateUser","newUser","setQueriesData","clearUser","setQueryData"],"sources":["C:/Users/tjdgh/Desktop/study/react-query/react-query-example/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { AxiosResponse } from 'axios';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery(queryKeys.user, () => getUser(user));\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    queryClient.setQueriesData(queryKeys.user, newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,uBAAuB;AAIhE,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAO1D,eAAeC,OAAO,CAACC,IAAiB,EAAwB;EAC9D,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAoC,CAAC,GAAG,MAAML,aAAa,CAACM,GAAG,CACpE,SAAQF,IAAI,CAACG,EAAG,EAAC,EAClB;IACEC,OAAO,EAAEP,YAAY,CAACG,IAAI;EAC5B,CAAC,CACF;EACD,OAAOC,IAAI,CAACD,IAAI;AAClB;AAQA,OAAO,SAASK,OAAO,GAAY;EAAA;EACjC,MAAMC,WAAW,GAAGX,cAAc,EAAE;EACpC,MAAM;IAAEM,IAAI,EAAED;EAAK,CAAC,GAAGN,QAAQ,CAACI,SAAS,CAACE,IAAI,EAAE,MAAMD,OAAO,CAACC,IAAI,CAAC,CAAC;;EAEpE;EACA,SAASO,UAAU,CAACC,OAAa,EAAQ;IACvCF,WAAW,CAACG,cAAc,CAACX,SAAS,CAACE,IAAI,EAAEQ,OAAO,CAAC;EACrD;;EAEA;EACA,SAASE,SAAS,GAAG;IACnBJ,WAAW,CAACK,YAAY,CAACb,SAAS,CAACE,IAAI,EAAE,IAAI,CAAC;EAChD;EAEA,OAAO;IAAEA,IAAI;IAAEO,UAAU;IAAEG;EAAU,CAAC;AACxC;AAAC,GAfeL,OAAO;EAAA,QACDV,cAAc,EACXD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}