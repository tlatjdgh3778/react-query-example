{"ast":null,"code":"import { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.esm.js';\nimport * as React from 'react';\nimport { displayValue, styled } from './utils.esm.js';\nimport SuperJSON from 'superjson';\nconst Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word'\n});\nconst Label = styled('span', {\n  color: 'white'\n});\nconst LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white'\n});\nconst ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0\n});\nconst CopyButton = _ref => {\n  let {\n    value\n  } = _ref;\n  const [copyState, setCopyState] = React.useState('NoCopy');\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: copyState === 'NoCopy' ? () => {\n      navigator.clipboard.writeText(SuperJSON.stringify(value)).then(() => {\n        setCopyState('SuccessCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      }, err => {\n        console.error('Failed to copy: ', err);\n        setCopyState('ErrorCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      });\n    } : undefined,\n    style: {\n      cursor: 'pointer',\n      color: 'inherit',\n      font: 'inherit',\n      outline: 'inherit',\n      background: 'transparent',\n      border: 'none',\n      padding: 0\n    }\n  }, copyState === 'NoCopy' ? /*#__PURE__*/React.createElement(Copier, null) : copyState === 'SuccessCopy' ? /*#__PURE__*/React.createElement(CopiedCopier, null) : /*#__PURE__*/React.createElement(ErrorCopier, null));\n};\nconst Value = styled('span', (_props, theme) => ({\n  color: theme.danger\n}));\nconst SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)'\n});\nconst Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em'\n});\nconst Expander = _ref2 => {\n  let {\n    expanded,\n    style = {}\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: \"rotate(\" + (expanded ? 90 : 0) + \"deg) \" + (style.transform || ''),\n      ...style\n    }\n  }, \"\\u25B6\");\n};\nconst Copier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Copy object to clipboard\",\n  title: \"Copy object to clipboard\",\n  style: {\n    paddingLeft: '1em'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n})));\nconst ErrorCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Failed copying to clipboard\",\n  title: \"Failed copying to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'flex',\n    alignItems: 'center'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"red\",\n  d: \"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n})), /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'red',\n    fontSize: '12px',\n    paddingLeft: '4px',\n    position: 'relative',\n    top: '2px'\n  }\n}, \"See console\"));\nconst CopiedCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Object copied to clipboard\",\n  title: \"Object copied to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'inline-block',\n    verticalAlign: 'middle'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  width: \"16\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"green\",\n  d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n})));\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nfunction chunkArray(array, size) {\n  if (size < 1) return [];\n  let i = 0;\n  const result = [];\n  while (i < array.length) {\n    result.push(array.slice(i, i + size));\n    i = i + size;\n  }\n  return result;\n}\nconst DefaultRenderer = _ref3 => {\n  let {\n    handleEntry,\n    label,\n    value,\n    subEntries = [],\n    subEntryPages = [],\n    type,\n    expanded = false,\n    copyable = false,\n    toggleExpanded,\n    pageSize\n  } = _ref3;\n  const [expandedPages, setExpandedPages] = React.useState([]);\n  return /*#__PURE__*/React.createElement(Entry, {\n    key: label\n  }, subEntryPages.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ExpandButton, {\n    onClick: () => toggleExpanded()\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" \", label, ' ', /*#__PURE__*/React.createElement(Info, null, String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : '', subEntries.length, \" \", subEntries.length > 1 ? \"items\" : \"item\")), copyable ? /*#__PURE__*/React.createElement(CopyButton, {\n    value: value\n  }) : null, expanded ? subEntryPages.length === 1 ? /*#__PURE__*/React.createElement(SubEntries, null, subEntries.map(handleEntry)) : /*#__PURE__*/React.createElement(SubEntries, null, subEntryPages.map((entries, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index\n  }, /*#__PURE__*/React.createElement(Entry, null, /*#__PURE__*/React.createElement(LabelButton, {\n    onClick: () => setExpandedPages(old => old.includes(index) ? old.filter(d => d !== index) : [...old, index])\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" [\", index * pageSize, \" ...\", ' ', index * pageSize + pageSize - 1, \"]\"), expandedPages.includes(index) ? /*#__PURE__*/React.createElement(SubEntries, null, entries.map(handleEntry)) : null)))) : null) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, null, label, \":\"), \" \", /*#__PURE__*/React.createElement(Value, null, displayValue(value))));\n};\nfunction isIterable(x) {\n  return Symbol.iterator in x;\n}\nfunction Explorer(_ref4) {\n  let {\n    value,\n    defaultExpanded,\n    renderer = DefaultRenderer,\n    pageSize = 100,\n    copyable = false,\n    ...rest\n  } = _ref4;\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded));\n  const toggleExpanded = React.useCallback(() => setExpanded(old => !old), []);\n  let type = typeof value;\n  let subEntries = [];\n  const makeProperty = sub => {\n    const subDefaultExpanded = defaultExpanded === true ? {\n      [sub.label]: true\n    } : defaultExpanded == null ? void 0 : defaultExpanded[sub.label];\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded\n    };\n  };\n  if (Array.isArray(value)) {\n    type = 'array';\n    subEntries = value.map((d, i) => makeProperty({\n      label: i.toString(),\n      value: d\n    }));\n  } else if (value !== null && typeof value === 'object' && isIterable(value) && typeof value[Symbol.iterator] === 'function') {\n    type = 'Iterable';\n    subEntries = Array.from(value, (val, i) => makeProperty({\n      label: i.toString(),\n      value: val\n    }));\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object';\n    subEntries = Object.entries(value).map(_ref5 => {\n      let [key, val] = _ref5;\n      return makeProperty({\n        label: key,\n        value: val\n      });\n    });\n  }\n  const subEntryPages = chunkArray(subEntries, pageSize);\n  return renderer({\n    handleEntry: entry => /*#__PURE__*/React.createElement(Explorer, _extends({\n      key: entry.label,\n      value: value,\n      renderer: renderer,\n      copyable: copyable\n    }, rest, entry)),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest\n  });\n}\nexport { CopyButton, DefaultRenderer, Entry, ExpandButton, Expander, Info, Label, LabelButton, SubEntries, Value, chunkArray, Explorer as default };","map":{"version":3,"mappings":"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","names":["Entry","styled","fontFamily","fontSize","lineHeight","outline","wordBreak","Label","color","LabelButton","cursor","ExpandButton","font","background","border","padding","CopyButton","value","copyState","setCopyState","React","useState","onClick","navigator","clipboard","writeText","superjson","stringify","then","setTimeout","err","console","error","undefined","style","CopiedCopier","Value","_props","theme","danger","SubEntries","marginLeft","paddingLeft","borderLeft","Info","Expander","expanded","display","transition","transform","Copier","title","height","viewBox","width","fill","d","ErrorCopier","alignItems","position","top","verticalAlign","chunkArray","array","size","i","result","length","push","slice","DefaultRenderer","handleEntry","label","subEntries","subEntryPages","type","copyable","toggleExpanded","pageSize","expandedPages","setExpandedPages","key","String","toLowerCase","map","entries","index","old","includes","filter","displayValue","isIterable","x","Symbol","iterator","Explorer","defaultExpanded","renderer","rest","setExpanded","Boolean","useCallback","makeProperty","sub","subDefaultExpanded","Array","isArray","toString","from","val","Object","entry"],"sources":["../../src/Explorer.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { displayValue, styled } from './utils'\nimport superjson from 'superjson'\n\nexport const Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word',\n})\n\nexport const Label = styled('span', {\n  color: 'white',\n})\n\nexport const LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white',\n})\n\nexport const ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0,\n})\n\ntype CopyState = 'NoCopy' | 'SuccessCopy' | 'ErrorCopy'\n\nexport const CopyButton = ({ value }: { value: unknown }) => {\n  const [copyState, setCopyState] = React.useState<CopyState>('NoCopy')\n\n  return (\n    <button\n      onClick={\n        copyState === 'NoCopy'\n          ? () => {\n              navigator.clipboard.writeText(superjson.stringify(value)).then(\n                () => {\n                  setCopyState('SuccessCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n                (err) => {\n                  console.error('Failed to copy: ', err)\n                  setCopyState('ErrorCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n              )\n            }\n          : undefined\n      }\n      style={{\n        cursor: 'pointer',\n        color: 'inherit',\n        font: 'inherit',\n        outline: 'inherit',\n        background: 'transparent',\n        border: 'none',\n        padding: 0,\n      }}\n    >\n      {copyState === 'NoCopy' ? (\n        <Copier />\n      ) : copyState === 'SuccessCopy' ? (\n        <CopiedCopier />\n      ) : (\n        <ErrorCopier />\n      )}\n    </button>\n  )\n}\n\nexport const Value = styled('span', (_props, theme) => ({\n  color: theme.danger,\n}))\n\nexport const SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)',\n})\n\nexport const Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em',\n})\n\ntype ExpanderProps = {\n  expanded: boolean\n  style?: React.CSSProperties\n}\n\nexport const Expander = ({ expanded, style = {} }: ExpanderProps) => (\n  <span\n    style={{\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: `rotate(${expanded ? 90 : 0}deg) ${style.transform || ''}`,\n      ...style,\n    }}\n  >\n    ▶\n  </span>\n)\n\nconst Copier = () => (\n  <span\n    aria-label=\"Copy object to clipboard\"\n    title=\"Copy object to clipboard\"\n    style={{\n      paddingLeft: '1em',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\">\n      <path\n        fill=\"currentColor\"\n        d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n      ></path>\n      <path\n        fill=\"currentColor\"\n        d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n      ></path>\n    </svg>\n  </span>\n)\n\nconst ErrorCopier = () => (\n  <span\n    aria-label=\"Failed copying to clipboard\"\n    title=\"Failed copying to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'flex',\n      alignItems: 'center',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\" display=\"block\">\n      <path\n        fill=\"red\"\n        d=\"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n      ></path>\n    </svg>\n    <span\n      style={{\n        color: 'red',\n        fontSize: '12px',\n        paddingLeft: '4px',\n        position: 'relative',\n        top: '2px',\n      }}\n    >\n      See console\n    </span>\n  </span>\n)\n\nconst CopiedCopier = () => (\n  <span\n    aria-label=\"Object copied to clipboard\"\n    title=\"Object copied to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    }}\n  >\n    <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" display=\"block\">\n      <path\n        fill=\"green\"\n        d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n      ></path>\n    </svg>\n  </span>\n)\n\ntype Entry = {\n  label: string\n}\n\ntype RendererProps = {\n  handleEntry: (entry: Entry) => JSX.Element\n  label?: string\n  value: unknown\n  subEntries: Entry[]\n  subEntryPages: Entry[][]\n  type: string\n  expanded: boolean\n  copyable: boolean\n  toggleExpanded: () => void\n  pageSize: number\n}\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (size < 1) return []\n  let i = 0\n  const result: T[][] = []\n  while (i < array.length) {\n    result.push(array.slice(i, i + size))\n    i = i + size\n  }\n  return result\n}\n\ntype Renderer = (props: RendererProps) => JSX.Element\n\nexport const DefaultRenderer: Renderer = ({\n  handleEntry,\n  label,\n  value,\n  subEntries = [],\n  subEntryPages = [],\n  type,\n  expanded = false,\n  copyable = false,\n  toggleExpanded,\n  pageSize,\n}) => {\n  const [expandedPages, setExpandedPages] = React.useState<number[]>([])\n\n  return (\n    <Entry key={label}>\n      {subEntryPages.length ? (\n        <>\n          <ExpandButton onClick={() => toggleExpanded()}>\n            <Expander expanded={expanded} /> {label}{' '}\n            <Info>\n              {String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : ''}\n              {subEntries.length} {subEntries.length > 1 ? `items` : `item`}\n            </Info>\n          </ExpandButton>\n          {copyable ? <CopyButton value={value} /> : null}\n          {expanded ? (\n            subEntryPages.length === 1 ? (\n              <SubEntries>{subEntries.map(handleEntry)}</SubEntries>\n            ) : (\n              <SubEntries>\n                {subEntryPages.map((entries, index) => (\n                  <div key={index}>\n                    <Entry>\n                      <LabelButton\n                        onClick={() =>\n                          setExpandedPages((old) =>\n                            old.includes(index)\n                              ? old.filter((d) => d !== index)\n                              : [...old, index],\n                          )\n                        }\n                      >\n                        <Expander expanded={expanded} /> [{index * pageSize} ...{' '}\n                        {index * pageSize + pageSize - 1}]\n                      </LabelButton>\n                      {expandedPages.includes(index) ? (\n                        <SubEntries>{entries.map(handleEntry)}</SubEntries>\n                      ) : null}\n                    </Entry>\n                  </div>\n                ))}\n              </SubEntries>\n            )\n          ) : null}\n        </>\n      ) : (\n        <>\n          <Label>{label}:</Label> <Value>{displayValue(value)}</Value>\n        </>\n      )}\n    </Entry>\n  )\n}\n\ntype ExplorerProps = Partial<RendererProps> & {\n  renderer?: Renderer\n  defaultExpanded?: true | Record<string, boolean>\n  copyable?: boolean\n}\n\ntype Property = {\n  defaultExpanded?: boolean | Record<string, boolean>\n  label: string\n  value: unknown\n}\n\nfunction isIterable(x: any): x is Iterable<unknown> {\n  return Symbol.iterator in x\n}\n\nexport default function Explorer({\n  value,\n  defaultExpanded,\n  renderer = DefaultRenderer,\n  pageSize = 100,\n  copyable = false,\n  ...rest\n}: ExplorerProps) {\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded))\n  const toggleExpanded = React.useCallback(() => setExpanded((old) => !old), [])\n\n  let type: string = typeof value\n  let subEntries: Property[] = []\n\n  const makeProperty = (sub: { label: string; value: unknown }): Property => {\n    const subDefaultExpanded =\n      defaultExpanded === true\n        ? { [sub.label]: true }\n        : defaultExpanded?.[sub.label]\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded,\n    }\n  }\n\n  if (Array.isArray(value)) {\n    type = 'array'\n    subEntries = value.map((d, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: d,\n      }),\n    )\n  } else if (\n    value !== null &&\n    typeof value === 'object' &&\n    isIterable(value) &&\n    typeof value[Symbol.iterator] === 'function'\n  ) {\n    type = 'Iterable'\n    subEntries = Array.from(value, (val, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: val,\n      }),\n    )\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object'\n    subEntries = Object.entries(value).map(([key, val]) =>\n      makeProperty({\n        label: key,\n        value: val,\n      }),\n    )\n  }\n\n  const subEntryPages = chunkArray(subEntries, pageSize)\n\n  return renderer({\n    handleEntry: (entry) => (\n      <Explorer\n        key={entry.label}\n        value={value}\n        renderer={renderer}\n        copyable={copyable}\n        {...rest}\n        {...entry}\n      />\n    ),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}