{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjdgh\\\\Desktop\\\\study\\\\react-query\\\\react-query-example\\\\base-infinite-swapi\\\\src\\\\species\\\\InfiniteSpecies.jsx\",\n  _s = $RefreshSig$();\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Species } from './Species';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialUrl = 'https://swapi.dev/api/species/';\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\nexport function InfiniteSpecies() {\n  _s();\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error\n  } = useInfiniteQuery(['sw-species'], _ref => {\n    let {\n      pageParam = initialUrl\n    } = _ref;\n    return fetchUrl(pageParam);\n  }, {\n    getNextPageParam: nextPage => nextPage.next || undefined\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error !\", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    hasMore: hasNextPage,\n    loadMore: fetchNextPage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(InfiniteSpecies, \"/46INzMD+m6DzisuAAWPdpzzvOw=\", false, function () {\n  return [useInfiniteQuery];\n});\n_c = InfiniteSpecies;\nvar _c;\n$RefreshReg$(_c, \"InfiniteSpecies\");","map":{"version":3,"names":["useInfiniteQuery","InfiniteScroll","Species","initialUrl","fetchUrl","url","response","fetch","json","InfiniteSpecies","data","fetchNextPage","hasNextPage","isLoading","isFetching","isError","error","pageParam","getNextPageParam","nextPage","next","undefined","toString"],"sources":["C:/Users/tjdgh/Desktop/study/react-query/react-query-example/base-infinite-swapi/src/species/InfiniteSpecies.jsx"],"sourcesContent":["import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Species } from './Species';\r\n\r\nconst initialUrl = 'https://swapi.dev/api/species/';\r\nconst fetchUrl = async (url) => {\r\n  const response = await fetch(url);\r\n  return response.json();\r\n};\r\n\r\nexport function InfiniteSpecies() {\r\n  const {\r\n    data,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    isFetching,\r\n    isError,\r\n    error,\r\n  } = useInfiniteQuery(\r\n    ['sw-species'],\r\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\r\n    {\r\n      getNextPageParam: (nextPage) => nextPage.next || undefined,\r\n    }\r\n  );\r\n\r\n  if (isLoading) return <div className='loading'>Loading ...</div>;\r\n  if (isError) return <div>Error !{error.toString()}</div>;\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      hasMore={hasNextPage}\r\n      loadMore={fetchNextPage}\r\n    ></InfiniteScroll>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,uBAAuB;AACxD,OAAOC,cAAc,MAAM,yBAAyB;AACpD,SAASC,OAAO,QAAQ,WAAW;AAAC;AAEpC,MAAMC,UAAU,GAAG,gCAAgC;AACnD,MAAMC,QAAQ,GAAG,MAAOC,GAAG,IAAK;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB,CAAC;AAED,OAAO,SAASC,eAAe,GAAG;EAAA;EAChC,MAAM;IACJC,IAAI;IACJC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC;EACF,CAAC,GAAGhB,gBAAgB,CAClB,CAAC,YAAY,CAAC,EACd;IAAA,IAAC;MAAEiB,SAAS,GAAGd;IAAW,CAAC;IAAA,OAAKC,QAAQ,CAACa,SAAS,CAAC;EAAA,GACnD;IACEC,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,IAAIC;EACnD,CAAC,CACF;EAED,IAAIR,SAAS,EAAE,oBAAO;IAAK,SAAS,EAAC,SAAS;IAAA,UAAC;EAAW;IAAA;IAAA;IAAA;EAAA,QAAM;EAChE,IAAIE,OAAO,EAAE,oBAAO;IAAA,WAAK,SAAO,EAACC,KAAK,CAACM,QAAQ,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAO;EAExD,oBACE,QAAC,cAAc;IACb,OAAO,EAAEV,WAAY;IACrB,QAAQ,EAAED;EAAc;IAAA;IAAA;IAAA;EAAA,QACR;AAEtB;AAAC,GA1BeF,eAAe;EAAA,QASzBT,gBAAgB;AAAA;AAAA,KATNS,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}